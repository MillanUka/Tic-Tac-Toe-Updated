{"version":3,"sources":["Engine.js","Components/Tile.jsx","Components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["checkIfTilesLeft","board","row","col","checkScore","getBestMove","bestValue","bestMove","move","minimax","depth","isMax","score","Infinity","value","Math","max","min","clearBoard","Tile","props","delay","ms","Promise","res","setTimeout","state","handleClick","bind","playerChar","this","id","index","onClick","parent","floor","alert","setState","MAX_PLAYER","Component","Board","restart","className","App","Array","createBoard","Fragment","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAMO,SAASA,EAAiBC,GAC7B,IAAK,IAAIC,EAAM,EAAGA,EAPQ,IAOgBA,EACtC,IAAK,IAAIC,EAAM,EAAGA,EAPI,IAOoBA,EACtC,GALS,MAKLF,EAAMC,GAAKC,GACX,OAAO,EAKnB,OAAO,EAGJ,SAASC,EAAWH,GAEvB,IAAK,IAAIC,EAAM,EAAGA,EApBQ,IAoBgBA,EACtC,IAAK,IAAIC,EAAM,EAAGA,EApBI,IAoBoBA,EACtC,GAAIF,EAAMC,GAAK,KAAOD,EAAMC,GAAK,IAC7BD,EAAMC,GAAK,KAAOD,EAAMC,GAAK,GAAI,CACjC,GAtBU,MAsBND,EAAMC,GAAK,GACX,OAAO,GACJ,GAvBG,MAuBCD,EAAMC,GAAK,GAClB,OAAQ,GAOxB,IAASA,EAAM,EAAGA,EAlCQ,IAkCgBA,EACtC,IAASC,EAAM,EAAGA,EAlCI,IAkCoBA,EACtC,GAAIF,EAAM,GAAGE,KAASF,EAAM,GAAGE,IAC3BF,EAAM,GAAGE,KAASF,EAAM,GAAGE,GAAM,CACjC,GApCU,MAoCNF,EAAM,GAAGE,GACT,OAAO,GACJ,GArCG,MAqCCF,EAAM,GAAGE,GAChB,OAAQ,GAaxB,IAASD,EAAM,EAAGA,EAtDQ,IAsDgBA,EACtC,IAASC,EAAM,EAAGA,EAtDI,IAsDoBA,EAAK,CAG3C,GAFoBF,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAE1D,CACd,GAzDU,MAyDNA,EAAM,GAAG,GACT,OAAO,GACJ,GA1DG,MA0DCA,EAAM,GAAG,GAChB,OAAQ,IAMxB,IAASC,EAAM,EAAGA,EApEQ,IAoEgBA,EACtC,IAASC,EAAM,EAAGA,EApEI,IAoEoBA,EAAK,CAE3C,GADqBF,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1D,CACf,GAtEU,MAsENA,EAAM,GAAG,GACT,OAAO,GACJ,GAvEG,MAuECA,EAAM,GAAG,GAChB,OAAQ,IAMxB,OAAO,EAIJ,SAASI,EAAYJ,GAWxB,IARA,IAAIK,GAAa,IAEbC,EAAW,CACX,IAAO,KACP,IAAO,MAIFL,EAAM,EAAGA,EAhGQ,IAgGgBA,EACtC,IAAK,IAAIC,EAAM,EAAGA,EAhGI,IAgGoBA,EACtC,GA9FS,MA8FLF,EAAMC,GAAKC,GAAgB,CAC3BF,EAAMC,GAAKC,GAjGD,IAmGV,IAAIK,EAAOC,EAAQR,EAAO,GAAG,GAG7BA,EAAMC,GAAKC,GApGN,IAsGDK,EAAOF,IACPC,EAASL,IAAMA,EACfK,EAASJ,IAAMA,EACfG,EAAYE,GAM5B,OAAOD,EAGJ,SAASE,EAAQR,EAAOS,EAAOC,GAClC,IAAIC,EAAQR,EAAWH,GAGvB,GAAc,KAAVW,IAA2B,KAAXA,EAChB,OAAOA,EAIX,IAAKZ,EAAiBC,GAClB,OAAO,EAGX,GAAIU,EAAO,CAKP,IAHA,IAAIL,GAAaO,IAGRX,EAAM,EAAGA,EAxII,IAwIoBA,EACtC,IAAK,IAAIC,EAAM,EAAGA,EAxIA,IAwIwBA,EACtC,GAtIK,MAsIDF,EAAMC,GAAKC,GAAgB,CAC3BF,EAAMC,GAAKC,GAzIL,IA2IN,IAAIW,EAAQL,EAAQR,EAAOS,EAAQ,GAAIC,GACvCL,EAAYS,KAAKC,IAAIV,EAAWQ,GAEhCb,EAAMC,GAAKC,GA5IV,IAiJb,OAAOG,EAIP,IADIA,EAAaO,IACRX,EAAM,EAAGA,EAzJI,IAyJoBA,EACtC,IAASC,EAAM,EAAGA,EAzJA,IAyJwBA,EACtC,GAvJK,MAuJDF,EAAMC,GAAKC,GAAgB,CAC3BF,EAAMC,GAAKC,GAzJL,IA2JFW,EAAQL,EAAQR,EAAOS,EAAQ,GAAIC,GACvCL,EAAYS,KAAKE,IAAIX,EAAWQ,GAChCb,EAAMC,GAAKC,GA5JV,IAgKb,OAAOG,EAkBR,SAASY,EAAWjB,GACvB,IAAK,IAAIC,EAAM,EAAGA,EAvLQ,IAuLgBA,EACtC,IAAK,IAAIC,EAAM,EAAGA,EAvLI,IAuLoBA,EACtCF,EAAMC,GAAKC,GArLF,I,ICqENgB,E,YArEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAkEVC,MAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAhE7C,EAAKI,MAAQ,GAGb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANJ,E,sEAST,IACEC,EAAeC,KAAKV,MAApBS,WACR,OACI,4BAAQE,GAAID,KAAKE,MAAOC,QAASH,KAAKH,aACjCE,K,sCAMT,OAAOC,KAAKD,a,uKAIqBC,KAAKV,MAA9BY,E,EAAAA,MAAO/B,E,EAAAA,MAAOiC,E,EAAAA,OAElBhC,EAAMa,KAAKoB,MAAMH,EAAQ,GACzB7B,EAAMY,KAAKoB,MAAMH,EAAQ,GD1BhB,MC4BT/B,EAAMC,GAAKC,G,uBACXiC,MAAM,8B,0BAIVnC,EAAMC,GAAKC,GDlCO,ICmClB2B,KAAKO,SAAS,IACdP,KAAKD,WDpCa,ICsCdtB,EAAWF,EAAYJ,GACvBW,EAAQ,EACS,OAAjBL,EAASL,MACTD,EAAMM,EAASL,KAAKK,EAASJ,KD1Cf,IC4CdS,EAAQR,EAAWH,IAGvBiC,EAAOG,SAAS,CAAEpC,MAAOA,I,KACjBW,E,OACC,K,SAMC,K,QAMD,I,gCAXDwB,MAAME,W,UACAR,KAAKT,MAAM,K,eACjBH,EAAWjB,GACXiC,EAAOG,SAAS,CAAEpC,MAAOA,I,oCAGzBmC,MAAM,Y,UACAN,KAAKT,MAAM,K,eACjBH,EAAWjB,GACXiC,EAAOG,SAAS,CAAEpC,MAAOA,I,oCAGpBD,EAAiBC,IAClBmC,MAAM,e,iIA9DPG,aC+CJC,E,YA7CX,WAAYpB,GAAQ,IAAD,0BAIPnB,GAHR,4CAAMmB,KAGiBA,MAAfnB,MAJO,OAKf,EAAKyB,MAAQ,CACTzB,MAAOA,GAGX,EAAKwC,QAAU,EAAKA,QAAQb,KAAb,gBATA,E,sEAaf,OAEI,yBAAKc,UAAU,WACX,6BACI,yBAAKA,UAAW,OACZ,kBAAC,EAAD,CAAMV,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,QAEzF,yBAAKY,UAAW,OACZ,kBAAC,EAAD,CAAMV,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,QAEzF,yBAAKY,UAAW,OACZ,kBAAC,EAAD,CAAMV,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,OACrF,kBAAC,EAAD,CAAME,MAAO,EAAGH,WAAYC,KAAKJ,MAAMzB,MAAM,GAAG,GAAIA,MAAO6B,KAAKJ,MAAMzB,MAAOiC,OAAQJ,SAG7F,6BACA,4BAAQY,UAAW,UAAWT,QAASH,KAAKW,SAA5C,c,gCAMRvB,EAAWY,KAAKJ,MAAMzB,OACtB6B,KAAKO,SAAS,CAACpC,MAAQ6B,KAAKJ,MAAMzB,Y,GA1CtBsC,aCWLI,MAXf,WACE,IAAI1C,EHoKC,WAGH,IAFA,IAAIA,EAAQ,IAAI2C,MAAM,GAEb1C,EAAM,EAAGA,EA5KQ,IA4KgBA,EAAK,CAC3CD,EAAMC,GAAO,IAAI0C,MAAM,GACvB,IAAK,IAAIzC,EAAM,EAAGA,EA7KI,IA6KoBA,EACtCF,EAAMC,GAAKC,GA3KF,IA+KjB,OAAOF,EG9KG4C,GACZ,OACE,kBAAC,IAAMC,SAAP,KACE,6BACA,kBAAC,EAAD,CAAO7C,MAAOA,EAAOyC,UAAW,YAChC,2CAAgB,uBAAGK,KAAM,gCAAT,cAAhB,KAAyE,uBAAGA,KAAM,wEAAT,kBCE3DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d88a3943.chunk.js","sourcesContent":["export const NUMBER_OF_ROWS = 3;\r\nexport const NUMBER_OF_COLS = 3;\r\nexport const MAX_PLAYER = 'X';\r\nexport const MIN_PLAYER = 'O';\r\nexport const BLANK = '-';\r\n\r\nexport function checkIfTilesLeft(board) {\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][col] === BLANK) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function checkScore(board) {\r\n    //Check the rows\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][0] === board[row][1] &&\r\n                board[row][1] === board[row][2]) {\r\n                if (board[row][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[row][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check the columns\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[0][col] === board[1][col] &&\r\n                board[1][col] === board[2][col]) {\r\n                if (board[0][col] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[0][col] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    _____________\r\n    |0,0|   |0,2|\r\n    |   |1,1|   |\r\n    |2,0|   |2,2|\r\n    */\r\n    //check the diagonals\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            var leftDiagonal = (board[0][0] === board[1][1] && board[1][1] === board[2][2]);\r\n\r\n            if (leftDiagonal) {\r\n                if (board[0][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[0][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            var rightDiagonal = (board[2][0] === board[1][1] && board[1][1] === board[0][2]);\r\n            if (rightDiagonal) {\r\n                if (board[2][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[2][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n\r\n}\r\n\r\nexport function getBestMove(board) {\r\n    //Assume that the player is the maximising player\r\n    //Best value is a small number\r\n    var bestValue = -1000;\r\n\r\n    var bestMove = {\r\n        \"row\": null,\r\n        \"col\": null\r\n    };\r\n\r\n    // Go through the board and calculate the best move\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][col] === BLANK) {\r\n                board[row][col] = MAX_PLAYER;\r\n\r\n                var move = minimax(board, 0, false);\r\n\r\n                //Make it blank after calculation\r\n                board[row][col] = BLANK;\r\n\r\n                if (move > bestValue) {\r\n                    bestMove.row = row;\r\n                    bestMove.col = col;\r\n                    bestValue = move;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestMove;\r\n}\r\n\r\nexport function minimax(board, depth, isMax) {\r\n    var score = checkScore(board);\r\n\r\n    //Check if the player has won. If th score is 10 the Max Player has won. \r\n    if (score === 10 || score === -10) {\r\n        return score;\r\n    }\r\n\r\n    //Check if it is a tie. If it is then return 0 to indicate that they haven't.\r\n    if (!checkIfTilesLeft(board)) {\r\n        return 0;\r\n    }\r\n\r\n    if (isMax) {\r\n        //Best Value is intialised as a small number. So that any move will be better.\r\n        var bestValue = -Infinity;\r\n\r\n        //Go thtough the entire board. And calculate the the best move.\r\n        for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n            for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n                if (board[row][col] === BLANK) {\r\n                    board[row][col] = MAX_PLAYER;\r\n\r\n                    var value = minimax(board, depth + 1, !isMax);\r\n                    bestValue = Math.max(bestValue, value);\r\n\r\n                    board[row][col] = BLANK;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bestValue;\r\n    } else {\r\n        // This is for the minmising players\r\n        var bestValue = +Infinity;\r\n        for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n            for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n                if (board[row][col] === BLANK) {\r\n                    board[row][col] = MIN_PLAYER;\r\n\r\n                    var value = minimax(board, depth + 1, !isMax);\r\n                    bestValue = Math.min(bestValue, value);\r\n                    board[row][col] = BLANK;\r\n                }\r\n            }\r\n        }\r\n        return bestValue;\r\n    }\r\n}\r\n\r\n//Creates a 2D array representing the board.\r\nexport function createBoard() {\r\n    var board = new Array(2);\r\n\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        board[row] = new Array(2);\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            board[row][col] = BLANK;\r\n        }\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nexport function clearBoard(board) {\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            board[row][col] = BLANK;\r\n        }\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { MIN_PLAYER, MAX_PLAYER, checkScore, getBestMove, checkIfTilesLeft, BLANK, clearBoard } from \"../Engine.js\";\r\n\r\nclass Tile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const { playerChar } = this.props;\r\n        return (\r\n            <button id={this.index} onClick={this.handleClick}>\r\n                {playerChar}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    getPlayerChar() {\r\n        return this.playerChar;\r\n    }\r\n\r\n    async handleClick() {\r\n        const { index, board, parent } = this.props;\r\n\r\n        var row = Math.floor(index / 3);\r\n        var col = Math.floor(index % 3);\r\n\r\n        if (board[row][col] !== BLANK) {\r\n            alert(\"You can't place one there!\")\r\n            return;\r\n        }\r\n\r\n        board[row][col] = MIN_PLAYER;\r\n        this.setState({});\r\n        this.playerChar = MIN_PLAYER;\r\n\r\n        var bestMove = getBestMove(board);\r\n        var score = 0;\r\n        if (bestMove.row !== null) {\r\n            board[bestMove.row][bestMove.col] = MAX_PLAYER;\r\n\r\n            score = checkScore(board);\r\n        }\r\n\r\n        parent.setState({ board: board });\r\n        switch (score) {\r\n            case 10:\r\n                alert(MAX_PLAYER + \" wins!\");\r\n                await this.delay(750);\r\n                clearBoard(board);\r\n                parent.setState({ board: board });\r\n                break;\r\n            case -10:\r\n                alert(\"You win!\");\r\n                await this.delay(750);\r\n                clearBoard(board);\r\n                parent.setState({ board: board });\r\n                break;\r\n            case 0:\r\n                if (!checkIfTilesLeft(board))\r\n                    alert(\"It's a tie.\");\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    delay = ms => new Promise(res => setTimeout(res, ms));\r\n}\r\nexport default Tile;","import React, { Component } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nimport {clearBoard} from \"../Engine.js\";\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        const { board } = this.props;\r\n        this.state = {\r\n            board: board\r\n        }\r\n\r\n        this.restart = this.restart.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"content\">\r\n                <div>\r\n                    <div className={\"row\"}>\r\n                        <Tile index={0} playerChar={this.state.board[0][0]} board={this.state.board} parent={this} />\r\n                        <Tile index={1} playerChar={this.state.board[0][1]} board={this.state.board} parent={this} />\r\n                        <Tile index={2} playerChar={this.state.board[0][2]} board={this.state.board} parent={this} />\r\n                    </div>\r\n                    <div className={\"row\"}>\r\n                        <Tile index={3} playerChar={this.state.board[1][0]} board={this.state.board} parent={this} />\r\n                        <Tile index={4} playerChar={this.state.board[1][1]} board={this.state.board} parent={this} />\r\n                        <Tile index={5} playerChar={this.state.board[1][2]} board={this.state.board} parent={this} />\r\n                    </div>\r\n                    <div className={\"row\"}>\r\n                        <Tile index={6} playerChar={this.state.board[2][0]} board={this.state.board} parent={this} />\r\n                        <Tile index={7} playerChar={this.state.board[2][1]} board={this.state.board} parent={this} />\r\n                        <Tile index={8} playerChar={this.state.board[2][2]} board={this.state.board} parent={this} />\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <button className={\"restart\"} onClick={this.restart}>Restart</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    restart() {\r\n        clearBoard(this.state.board);\r\n        this.setState({board : this.state.board});\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Components/Board';\r\nimport { createBoard } from './Engine';\r\nfunction App() {\r\n  var board = createBoard();\r\n  return (\r\n    <React.Fragment >\r\n      <br />\r\n      <Board board={board} className={\"content\"}/>\r\n      <footer>Made my <a href={\"https://github.com/MillanUka\"}>Millan Uka</a>. <a href={\"https://github.com/MillanUka/Tic-Tac-Toe-Updated/blob/master/LICENSE\"}>MIT License</a></footer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}