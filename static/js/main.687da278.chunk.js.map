{"version":3,"sources":["Engine.js","Components/Tile.jsx","Components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["checkIfTilesLeft","board","row","col","checkScore","minimax","depth","isMax","score","bestValue","Infinity","value","Math","max","min","Tile","props","state","isDisabled","handleClick","bind","playerChar","this","id","index","onClick","disabled","parent","floor","setState","bestMove","move","console","log","getBestMove","alert","MAX_PLAYER","table","Component","Board","tiles","App","Array","createBoard","Fragment","className","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.687da278.chunk.js","sourcesContent":["export const NUMBER_OF_ROWS = 3;\r\nexport const NUMBER_OF_COLS = 3;\r\nexport const MAX_PLAYER = 'X';\r\nexport const MIN_PLAYER = 'O';\r\nexport const BLANK = '-';\r\n\r\nexport function checkIfTilesLeft(board) {\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][col] === BLANK) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function checkScore(board) {\r\n    //Check the rows\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][0] === board[row][1] &&\r\n                board[row][1] === board[row][2]) {\r\n                //console.table(board);\r\n                if (board[row][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[row][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check the columns\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[0][col] === board[1][col] &&\r\n                board[1][col] === board[2][col]) {\r\n                //console.table(board);\r\n                if (board[0][col] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[0][col] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    _____________\r\n    |0,0|   |0,2|\r\n    |   |1,1|   |\r\n    |2,0|   |2,2|\r\n    */\r\n    //check the diagonals\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            var leftDiagonal = (board[0][0] === board[1][1] && board[1][1] === board[2][2]);\r\n\r\n            if (leftDiagonal) {\r\n                //console.table(board);\r\n                if (board[0][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[0][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            var rightDiagonal = (board[2][0] === board[1][1] && board[1][1] === board[0][2]);\r\n            if (rightDiagonal) {\r\n                //console.table(board);\r\n                if (board[2][0] === MAX_PLAYER) {\r\n                    return 10;\r\n                } else if (board[2][0] === MIN_PLAYER) {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n\r\n}\r\n\r\nexport function getBestMove(board) {\r\n    //Assume that the player is the maximising player\r\n    //Best value is a small number\r\n    var bestValue = -1000;\r\n\r\n    var bestMove = {\r\n        \"row\": null,\r\n        \"col\": null\r\n    };\r\n\r\n    // Go through the board and calculate the best move\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            if (board[row][col] === BLANK) {\r\n                board[row][col] = MAX_PLAYER;\r\n\r\n                var move = minimax(board, 0, false);\r\n                console.log(move);\r\n\r\n                //Make it blank after calculation\r\n                board[row][col] = BLANK;\r\n\r\n                if (move > bestValue) {\r\n                    bestMove.row = row;\r\n                    bestMove.col = col;\r\n                    bestValue = move;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestMove;\r\n}\r\n\r\nexport function minimax(board, depth, isMax) {\r\n    var score = checkScore(board);\r\n\r\n    //Check if the player has won. If th score is 10 the Max Player has won. \r\n    if (score === 10 || score === -10) {\r\n        return score;\r\n    }\r\n\r\n    //Check if it is a tie. If it is then return 0 to indicate that they haven't.\r\n    if (!checkIfTilesLeft(board)) {\r\n        return 0;\r\n    }\r\n\r\n    if (isMax) {\r\n        //Best Value is intialised as a small number. So that any move will be better.\r\n        var bestValue = -Infinity;\r\n\r\n        //Go thtough the entire board. And calculate the the best move.\r\n        for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n            for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n                if (board[row][col] === BLANK) {\r\n                    board[row][col] = MAX_PLAYER;\r\n\r\n                    var value = minimax(board, depth + 1, !isMax);\r\n                    bestValue = Math.max(bestValue, value);\r\n\r\n                    board[row][col] = BLANK;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bestValue;\r\n    } else {\r\n        // This is for the minmising players\r\n        var bestValue = +Infinity;\r\n        for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n            for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n                if (board[row][col] === BLANK) {\r\n                    board[row][col] = MIN_PLAYER;\r\n\r\n                    var value = minimax(board, depth + 1, !isMax);\r\n                    bestValue = Math.min(bestValue, value);\r\n                    board[row][col] = BLANK;\r\n                }\r\n            }\r\n        }\r\n        return bestValue;\r\n    }\r\n}\r\n\r\n//Creates a 2D array representing the board.\r\nexport function createBoard() {\r\n    var board = new Array(2);\r\n\r\n    for (var row = 0; row < NUMBER_OF_ROWS; ++row) {\r\n        board[row] = new Array(2);\r\n        for (var col = 0; col < NUMBER_OF_COLS; ++col) {\r\n            board[row][col] = BLANK;\r\n        }\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport { MIN_PLAYER, MAX_PLAYER, checkScore, getBestMove, checkIfTilesLeft, BLANK } from \"../Engine.js\";\r\n\r\nclass Tile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isDisabled: false,\r\n\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const { playerChar } = this.props;\r\n        return (\r\n            <button id={this.index} onClick={this.handleClick} disabled={this.state.isDisabled}>\r\n                {playerChar}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    getPlayerChar() {\r\n        return this.playerChar;\r\n    }\r\n\r\n    handleClick() {\r\n        const { index, board, parent, playerChar } = this.props;\r\n\r\n        var row = Math.floor(index / 3);\r\n        var col = Math.floor(index % 3);\r\n\r\n        if (board[row][col] !== BLANK) {\r\n            alert(\"You can't place one there!\")\r\n            return;\r\n        }\r\n\r\n        board[row][col] = MIN_PLAYER;\r\n        this.setState({ isDisabled: true });\r\n        this.playerChar = MIN_PLAYER;\r\n\r\n        var bestMove = getBestMove(board);\r\n        console.log(bestMove);\r\n        var score = 0;\r\n        if (bestMove.row !== null) {\r\n            board[bestMove.row][bestMove.col] = MAX_PLAYER;\r\n\r\n            score = checkScore(board);\r\n        }\r\n\r\n        parent.setState({ board: board });\r\n        switch (score) {\r\n            case 10:\r\n                alert(MAX_PLAYER + \" wins!\");\r\n                break;\r\n            case -10:\r\n                alert(\"You win!\");\r\n                break;\r\n            case 0:\r\n                console.log(board);\r\n                if (!checkIfTilesLeft(board))\r\n                    alert(\"It's a tie.\");\r\n                break;\r\n        }\r\n\r\n        console.table(board);\r\n    }\r\n}\r\n\r\nexport default Tile;","import React, { Component } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        \r\n        const { board } = this.props;\r\n        this.state = {\r\n            board : board\r\n        }\r\n        this.tiles = [];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.board);\r\n        return (\r\n            <div>\r\n                <div>\r\n                <Tile index={0} playerChar={this.state.board[0][0]} board={this.state.board} parent={this}/>\r\n                <Tile index={1} playerChar={this.state.board[0][1]} board={this.state.board} parent={this}/>\r\n                <Tile index={2} playerChar={this.state.board[0][2]} board={this.state.board} parent={this}/>\r\n                </div>\r\n                <div>\r\n                <Tile index={3} playerChar={this.state.board[1][0]} board={this.state.board} parent={this}/>\r\n                <Tile index={4} playerChar={this.state.board[1][1]} board={this.state.board} parent={this}/>\r\n                <Tile index={5} playerChar={this.state.board[1][2]} board={this.state.board} parent={this}/>\r\n                </div>\r\n                <div>\r\n                <Tile index={6} playerChar={this.state.board[2][0]} board={this.state.board} parent={this}/>\r\n                <Tile index={7} playerChar={this.state.board[2][1]} board={this.state.board} parent={this}/>\r\n                <Tile index={8} playerChar={this.state.board[2][2]} board={this.state.board} parent={this}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Components/Board';\r\nimport { createBoard, clearBoard } from './Engine';\r\nfunction App() {\r\n  var board = createBoard();\r\n  return (\r\n    <React.Fragment className={\"content\"}>\r\n      <Board board={board} />\r\n      <footer>Made my <a href={\"https://github.com/MillanUka\"}>Millan Uka</a></footer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}